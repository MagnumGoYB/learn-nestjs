generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String               @id @default(cuid())
  name        String?
  email       String?              @unique
  phone       String?              @unique
  wxId        String?              @unique
  wbId        String?              @unique
  role        Role                 @default(USER)
  isDeleted   Boolean              @default(false) @map("is_deleted")
  createdAt   DateTime             @default(now()) @map("created_at")
  updatedAt   DateTime             @updatedAt @map("updated_at")
  createds    Collection[]
  collections CollectionRelOwner[]
  orders      Order[]

  @@map("users")
}

model Collection {
  id           String               @id @default(cuid())
  title        String?
  pricing      Float
  creatorId    String               @map("creator_id")
  isDeleted    Boolean              @default(false) @map("is_deleted")
  createdAt    DateTime             @default(now()) @map("created_at")
  updatedAt    DateTime             @updatedAt @map("updated_at")
  contractType ContractTypeEnum     @map("contract_type")
  stockId      String               @unique @map("stock_id")
  creator      User                 @relation(fields: [creatorId], references: [id])
  stock        Stock                @relation(fields: [stockId], references: [id])
  orders       Order?
  owners       CollectionRelOwner[]

  @@map("collections")
}

model CollectionRelOwner {
  onwer        User       @relation(fields: [onwerId], references: [id])
  onwerId      String     @map("owner_id")
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String     @map("collection_id")
  isDeleted    Boolean    @default(false) @map("is_deleted")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@id([onwerId, collectionId])
  @@map("collection_rel_owner")
}

model Stock {
  id         String      @id @default(cuid())
  quantity   Int         @default(1)
  isDeleted  Boolean     @default(false) @map("is_deleted")
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  total      Int         @default(1)
  collection Collection?

  @@map("stocks")
}

model Order {
  id           String          @unique
  status       OrderStatusEnum @default(PENDING)
  payWay       OrderPayWayEnum @map("pay_way")
  expiredAt    DateTime        @map("expired_at")
  paidAt       DateTime?       @map("paid_at")
  collectionId String          @unique @map("collection_id")
  isDeleted    Boolean         @default(false) @map("is_deleted")
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @updatedAt @map("updated_at")
  ownerId      String          @map("owner_id")
  collection   Collection      @relation(fields: [collectionId], references: [id])
  owner        User            @relation(fields: [ownerId], references: [id])

  @@map("orders")
}

enum Role {
  USER
  ADMIN
}

enum ContractTypeEnum {
  ERC_721
  ERC_1155
}

enum OrderStatusEnum {
  PENDING
  DONED
  FAILED
  INVALID
}

enum OrderPayWayEnum {
  ALIPAY
  WECHATPAY
}
